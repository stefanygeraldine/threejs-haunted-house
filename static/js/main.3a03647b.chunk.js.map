{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["gui","dat","scene","THREE","renderer","setClearColor","shadowMap","enabled","type","camera","window","innerWidth","innerHeight","position","x","y","z","add","hide","controls","OrbitControls","domElement","enableDamping","textureLoader","animate","update","render","requestAnimationFrame","init","size","setSize","width","height","setPixelRatio","Math","min","devicePixelRatio","document","body","appendChild","house","bricksColorTexture","load","bricksAmbientOcclusionTexture","bricksNormalTexture","bricksRoughnessTexture","walls","map","aoMap","normalMap","roughnessMap","geometry","setAttribute","attributes","uv","array","roof","color","rotation","PI","doorColorTexture","doorAlphaTexture","doorAmbientOcclusionTexture","doorHeightTexture","doorNormalTexture","doorMetalnessTexture","doorRoughnessTexture","door","transparent","alphaMap","displacementMap","displacementScale","metalnessMap","bushGeometry","bushMaterial","bush1","scale","set","bush2","bush3","bush4","graves","graveGeometry","graveMaterial","i","angle","random","radius","cos","sin","grave","castShadow","grassColorTexture","grassAmbientOcclusionTexture","grassNormalTexture","grassRoughnessTexture","repeat","wrapS","wrapT","floor","receiveShadow","ghost1","ghost2","ghost3","clock","tick","elapsedTime","getElapsedTime","ghost1Angle","ghost2Angle","ghost3Angle","ambientLight","max","step","moonLight","doorLight","fog","App","useState","updateSize","useCallback","event","aspect","updateProjectionMatrix","useEffect","addEventListener","removeEventListener","_jsx","children","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","React","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3a03647b.chunk.js","sourcesContent":["import {useCallback, useState, useEffect} from 'react'\nimport * as THREE from 'three'\nimport {OrbitControls} from 'three/examples/jsm/controls/OrbitControls'\nimport * as dat from 'dat.gui'\nimport './App.css'\n\n\n/**\n * Base\n */\n// Debug\nconst gui = new dat.GUI()\n\n// Scene\nconst scene = new THREE.Scene()\n// Canvas\nconst renderer = new THREE.WebGLRenderer()\nrenderer.setClearColor('#262837')\nrenderer.shadowMap.enabled = true\nrenderer.shadowMap.type = THREE.PCFSoftShadowMap\n// Base camera\nconst camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 100)\ncamera.position.x = 4\ncamera.position.y = 2\ncamera.position.z = 5\nscene.add(camera)\ngui.hide()\n// Controls\nconst controls = new OrbitControls(camera, renderer.domElement)\ncontrols.enableDamping = true\n// textureLoader\nconst textureLoader = new THREE.TextureLoader();\n\nfunction animate() {\n\n  // Update controls\n  controls.update()\n\n\n\n  renderer.render( scene, camera )\n  requestAnimationFrame( animate )\n\n\n}\n\nfunction init(size){\n\n\n  renderer.setSize( size.width, size.height )\n  renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n  document.body.appendChild( renderer.domElement )\n\n\n  /**\n   * House\n   */\n//Group\n  const house = new THREE.Group()\n  scene.add(house)\n\n  //Walls\n  const bricksColorTexture = textureLoader.load('/textures/bricks/color.jpg')\n  const bricksAmbientOcclusionTexture = textureLoader.load('/textures/bricks/ambientOcclusion.jpg')\n  const bricksNormalTexture = textureLoader.load('/textures/bricks/normal.jpg')\n  const bricksRoughnessTexture = textureLoader.load('/textures/bricks/roughness.jpg')\n  const walls = new THREE.Mesh(\n      new THREE.BoxGeometry(4,2.5,4),\n      new THREE.MeshStandardMaterial({\n        map: bricksColorTexture,\n        aoMap: bricksAmbientOcclusionTexture,\n        normalMap: bricksNormalTexture,\n        roughnessMap: bricksRoughnessTexture\n      })\n  )\n  walls.position.y = 1.25\n  walls.geometry.setAttribute('uv2', new THREE.Float32BufferAttribute(walls.geometry.attributes.uv.array, 2))\n  house.add(walls)\n\n  //Roof\n  const roof = new THREE.Mesh(\n      new THREE.ConeBufferGeometry(3.5,1,4),\n      new THREE.MeshStandardMaterial({color: '#b35f45'})\n  )\n  roof.position.y = 2.5 + 0.5\n  roof.rotation.y = Math.PI * 0.25\n  house.add(roof)\n\n  //Door\n  const doorColorTexture = textureLoader.load('/textures/door/color.jpg')\n  const doorAlphaTexture = textureLoader.load('/textures/door/alpha.jpg')\n  const doorAmbientOcclusionTexture = textureLoader.load('/textures/door/ambientOcclusion.jpg')\n  const doorHeightTexture = textureLoader.load('/textures/door/height.jpg')\n  const doorNormalTexture = textureLoader.load('/textures/door/normal.jpg')\n  const doorMetalnessTexture = textureLoader.load('/textures/door/metalness.jpg')\n  const doorRoughnessTexture = textureLoader.load('/textures/door/roughness.jpg')\n\n  const door = new THREE.Mesh(\n      new THREE.PlaneGeometry(2.2, 2.2, 100, 100),\n      new THREE.MeshStandardMaterial({\n          map: doorColorTexture,\n          transparent: true,\n          alphaMap: doorAlphaTexture,\n          aoMap: doorAmbientOcclusionTexture,\n          displacementMap: doorHeightTexture,\n          displacementScale: 0.1,\n          normalMap: doorNormalTexture,\n          metalnessMap: doorMetalnessTexture,\n          roughnessMap: doorRoughnessTexture\n        }))\n  door.position.y = 1\n  door.position.z = 2 + 0.01\n  house.add(door)\n\n//bushes\n  const bushGeometry = new THREE.SphereBufferGeometry(1,16,16)\n  const bushMaterial = new THREE.MeshStandardMaterial({color: '#89c854'})\n\n\n  const bush1 = new THREE.Mesh(bushGeometry, bushMaterial)\n  bush1.scale.set(0.5, 0.5, 0.5)\n  bush1.position.set(0.8, 0.2, 2.2)\n\n  const bush2 = new THREE.Mesh(bushGeometry, bushMaterial)\n  bush2.scale.set(0.25, 0.25, 0.25)\n  bush2.position.set(1.4, 0.1, 2.1)\n\n  const bush3 = new THREE.Mesh(bushGeometry, bushMaterial)\n  bush3.scale.set(0.4, 0.4, 0.4)\n  bush3.position.set(-0.8, 0.1, 2.2)\n\n  const bush4 = new THREE.Mesh(bushGeometry, bushMaterial)\n  bush4.scale.set(0.15, 0.15, 0.15)\n  bush4.position.set(-1, 0.05, 2.6)\n\n  house.add(bush1, bush2, bush3, bush4)\n\n\n\n\n//Graves\n  const graves = new THREE.Group()\n  scene.add(graves)\n\n  const graveGeometry = new THREE.BoxBufferGeometry(0.6,0.8,0.2)\n  const graveMaterial = new THREE.MeshStandardMaterial({color: '#b2b6b1'})\n\n  for(let i = 0; i < 50; i++)\n  {\n    const angle = Math.random() * Math.PI * 2 // Random angle\n    const radius = 3 + Math.random() * 6      // Random radius\n    const x = Math.cos(angle) * radius        // Get the x position using cosinus\n    const z = Math.sin(angle) * radius        // Get the z position using sinus\n\n    // Create the mesh\n    const grave = new THREE.Mesh(graveGeometry, graveMaterial)\n\n    // Position\n    grave.position.set(x, 0.3, z)\n\n    // Rotation\n    grave.rotation.z = (Math.random() - 0.5) * 0.4\n    grave.rotation.y = (Math.random() - 0.5) * 0.4\n\n    grave.castShadow = true\n\n    // Add to the graves container\n    graves.add(grave)\n  }\n\n// Floor\n  const grassColorTexture = textureLoader.load('/textures/grass/color.jpg')\n  const grassAmbientOcclusionTexture = textureLoader.load('/textures/grass/ambientOcclusion.jpg')\n  const grassNormalTexture = textureLoader.load('/textures/grass/normal.jpg')\n  const grassRoughnessTexture = textureLoader.load('/textures/grass/roughness.jpg')\n\n  grassColorTexture.repeat.set(8, 8)\n  grassAmbientOcclusionTexture.repeat.set(8, 8)\n  grassNormalTexture.repeat.set(8, 8)\n  grassRoughnessTexture.repeat.set(8, 8)\n\n  grassColorTexture.wrapS = THREE.RepeatWrapping\n  grassAmbientOcclusionTexture.wrapS = THREE.RepeatWrapping\n  grassNormalTexture.wrapS = THREE.RepeatWrapping\n  grassRoughnessTexture.wrapS = THREE.RepeatWrapping\n\n  grassColorTexture.wrapT = THREE.RepeatWrapping\n  grassAmbientOcclusionTexture.wrapT = THREE.RepeatWrapping\n  grassNormalTexture.wrapT = THREE.RepeatWrapping\n  grassRoughnessTexture.wrapT = THREE.RepeatWrapping\n\n  const floor = new THREE.Mesh(\n      new THREE.PlaneGeometry(20, 20),\n      new THREE.MeshStandardMaterial({\n        map: grassColorTexture,\n        aoMap: grassAmbientOcclusionTexture,\n        normalMap: grassNormalTexture,\n        roughnessMap: grassRoughnessTexture\n      })\n  )\n  floor.rotation.x = - Math.PI * 0.5\n  floor.position.y = 0\n  floor.receiveShadow = true\n  floor.geometry.setAttribute('uv2', new THREE.Float32BufferAttribute(floor.geometry.attributes.uv.array, 2))\n  scene.add(floor)\n\n\n  /**\n   * Ghosts\n   */\n  const ghost1 = new THREE.PointLight('#ff00ff', 2, 3)\n  scene.add(ghost1)\n\n  const ghost2 = new THREE.PointLight('#00ffff', 2, 3)\n  scene.add(ghost2)\n\n  const ghost3 = new THREE.PointLight('#ffff00', 2, 3)\n  scene.add(ghost3)\n\n  const clock = new THREE.Clock()\n\n  const tick = () => {\n    const elapsedTime = clock.getElapsedTime()\n\n    // Ghosts\n    const ghost1Angle = elapsedTime * 0.5\n    ghost1.position.x = Math.cos(ghost1Angle) * 4\n    ghost1.position.z = Math.sin(ghost1Angle) * 4\n    ghost1.position.y = Math.sin(elapsedTime * 3)\n\n    const ghost2Angle = - elapsedTime * 0.32\n    ghost2.position.x = Math.cos(ghost2Angle) * 5\n    ghost2.position.z = Math.sin(ghost2Angle) * 5\n    ghost2.position.y = Math.sin(elapsedTime * 4) + Math.sin(elapsedTime * 2.5)\n\n    const ghost3Angle = - elapsedTime * 0.18\n    ghost3.position.x = Math.cos(ghost3Angle) * (7 + Math.sin(elapsedTime * 0.32))\n    ghost3.position.z = Math.sin(ghost3Angle) * (7 + Math.sin(elapsedTime * 0.5))\n    ghost3.position.y = Math.sin(elapsedTime * 4) + Math.sin(elapsedTime * 2.5)\n\n    window.requestAnimationFrame(tick)\n  }\n\n  tick()\n\n  /**\n   * Lights\n   */\n// Ambient light\n  const ambientLight = new THREE.AmbientLight('#b9d5ff', 0.12)\n  gui.add(ambientLight, 'intensity').min(0).max(1).step(0.001)\n  scene.add(ambientLight)\n\n// Directional light\n  const moonLight = new THREE.DirectionalLight('#b9d5ff', 0.12)\n  moonLight.position.set(4, 5, - 2)\n  gui.add(moonLight, 'intensity').min(0).max(1).step(0.001)\n  gui.add(moonLight.position, 'x').min(- 5).max(5).step(0.001)\n  gui.add(moonLight.position, 'y').min(- 5).max(5).step(0.001)\n  gui.add(moonLight.position, 'z').min(- 5).max(5).step(0.001)\n  scene.add(moonLight)\n\n// Door light\n  const doorLight = new THREE.PointLight('#ff7d46', 1, 7)\n  doorLight.position.set(0, 2.2, 2.7)\n  house.add(doorLight)\n\n  /**\n   * Fog\n   */\n  const fog = new THREE.Fog('#262837', 1, 15)\n  scene.fog = fog\n\n  //shadows\n  moonLight.castShadow = true\n  doorLight.castShadow = true\n  ghost1.castShadow = true\n  ghost2.castShadow = true\n  ghost3.castShadow = true\n\n  walls.castShadow = true\n  bush1.castShadow = true\n  bush2.castShadow = true\n  bush3.castShadow = true\n  bush4.castShadow = true\n\n  animate()\n}\n\n\n\nfunction App() {\n  const [size, setSize] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight\n  })\n\n  const updateSize = useCallback(event => {\n\n    // Update camera\n    camera.aspect = window.innerWidth / window.innerHeight\n    camera.updateProjectionMatrix()\n\n    // Update renderer\n    renderer.setSize(window.innerWidth, window.innerHeight)\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n\n\n    setSize({\n      width: window.innerWidth,\n      height: window.innerHeight\n    })\n\n  }, [])\n\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", updateSize)\n    return () => {\n      window.removeEventListener(\"resize\", updateSize)\n    }\n  }, [])\n\n  return(\n      <div>\n        {init(size)}\n      </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}